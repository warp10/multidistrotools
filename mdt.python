#!/usr/bin/python
#
# Wrapper for all MultiDistroTools scripts. Does the option parsing for --help,
# --verbose

import os
import sys
import subprocess

SCRIPTSDIR = os.environ['MDT_SCRIPTSDIR'] if "MDT_SCRIPTSDIR" in os.environ else "/usr/share/multidistrotools/"
if SCRIPTSDIR[-1] != '/':
    SCRIPTSDIR += '/'

commands = {
 # name, destfile, description
 'test': [SCRIPTSDIR + 'test.bash', 'Test script for MultiDistroTools'],
 'bin2src' : [ SCRIPTSDIR + 'bin2src.py', 'Show source packages for binary packages' ],
 'dist-bin2src' : [ SCRIPTSDIR + 'dist-bin2src.py', 'Show source packages for binary packages using an APT tree' ],
 'src2bin' : [ SCRIPTSDIR + 'src2bin.bash', 'Show binary packages for source packages' ],
 'unify' : [ SCRIPTSDIR + 'unify.bash', 'Sort and remove duplicate lines' ],
 'list_union' : [ SCRIPTSDIR + 'list_union.bash', 'Write the union of two lists' ],
 'list_inter' : [ SCRIPTSDIR + 'list_inter.bash', 'Write the intersection of two lists' ],
 'list_diff' : [ SCRIPTSDIR + 'list_diff.bash', 'Write the difference of two lists' ],
 'list_sub' : [ SCRIPTSDIR + 'list_sub.bash', 'Write list1 minus list2' ],
 'filter' : [ SCRIPTSDIR + 'filter.rb', 'Filter lines on stdin with a file' ],
 'sort_with' : [ SCRIPTSDIR + 'sort_with.rb', 'Sort lines on stdin according to a file on stdout' ],
 'versions_exclude_same' : [ SCRIPTSDIR + 'versions_exclude_same.bash', 'Take a list of packages generated by compare-versions and exclude lines where the two versions are the same' ],
 'popcon' : [ SCRIPTSDIR + 'popcon.bash', 'List popcon results' ],
 'depends' : [ SCRIPTSDIR + 'depends.bash', 'List packages using Depends or reverse Depends' ],
 'compare-versions' : [ SCRIPTSDIR + 'compare-versions.bash', 'List packages with their versions in Debian and Ubuntu' ],
 'versions2html' : [ SCRIPTSDIR + 'versions2html.rb', 'Generate an HTML report from compare-versions\' output' ],
 'dist-create' : [ SCRIPTSDIR + 'dist-create.bash', 'Creates an APT tree for another distribution' ],
 'dist-apt-get' : [ SCRIPTSDIR + 'dist-apt-get.bash', 'Executes apt-get in another APT tree.' ],
 'tmp-apt-rdepends' : [ SCRIPTSDIR + 'tmp-apt-rdepends', 'apt-rdepends with patch (suggested to Debian, see bug #346140)'],
 'dist-grep-dctrl-sources' : [ SCRIPTSDIR + 'dist-grep-dctrl-sources.bash', 'Executes grep-dctrl on *Sources lists in another APT tree.' ],
 'dist-grep-dctrl-packages' : [ SCRIPTSDIR + 'dist-grep-dctrl-packages.bash', 'Executes grep-dctrl on *Packages lists in another APT tree.' ],
 'dist-apt-cache' : [ SCRIPTSDIR + 'dist-apt-cache.bash', 'Executes apt-cache in another APT tree.' ],
 'motunotes' : [ SCRIPTSDIR + 'motunotes.bash', 'Get the comments from https://wiki.ubuntu.com/MOTUNotes.' ],
 'mergelist2comments' : [ SCRIPTSDIR + 'mergelist2comments.rb', 'Convert the output from sistpoty\'s mergeWebTool.' ],
 'removals' : [ SCRIPTSDIR + 'removals.py', 'Mark packages removed from Debian as such.' ],
}

def show_help(arg = None):
    print "MultiDistroTools - https://wiki.ubuntu.com/MultiDistroTools"
    print "-----------------------------------------------------------"
    if arg in commands.keys():
        run_command(commands[arg][0], '--help')
    else:
	print "To see help on the specific command, use mdt --help command"
        print "To run one of those commands, use mdt command [command args]"
        for command in sorted(commands.keys()):
	    print "   " + command + " - " + commands[command][1]

def run_command(cmd):
    subprocess.call(cmd)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        show_help()
        sys.exit()

    idx = 1
    done = False

    while idx < len(sys.argv):
        a = sys.argv[idx]
        if a == '-v' or a == '--verbose':
            os.environ['MDT_VERBOSE'] = '1'
            idx += 1
        elif a == '-V' or a == '--version':
            print "Not Implemented Yet"
            sys.exit(0)
        elif a == '-h' or a == '--help':
            try:
                show_help(sys.argv[idx+1])
            except:
                show_help()
            sys.exit(0)
        else:
            if a in commands:
                run_command([commands[a][0]] + sys.argv[1:-1] )
            else:
                print "Unknown command. See mdt --help."
            done = True
            idx +=1

    if not done:
        print "See mdt --help"
